// Mocks generated by Mockito 5.0.14 from annotations
// in mobile/test/MainPage/MainPage_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;
import 'dart:typed_data' as _i7;

import 'package:mobile/domain/Contact.dart' as _i9;
import 'package:mobile/domain/Message.dart' as _i4;
import 'package:mobile/models/ChatModel.dart' as _i3;
import 'package:mobile/models/ContactsModel.dart' as _i8;
import 'package:mobile/models/UserModel.dart' as _i6;
import 'package:mobile/services/AppService.dart' as _i11;
import 'package:mobile/services/DatabaseService.dart' as _i12;
import 'package:mobile/services/responses/DatabaseServiceResponses.dart' as _i5;
import 'package:mobx/mobx.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeObservableList_0<T> extends _i1.Fake
    implements _i2.ObservableList<T> {}

class _FakeChatModel_1 extends _i1.Fake implements _i3.ChatModel {}

class _FakeMessage_2 extends _i1.Fake implements _i4.Message {}

class _FakeCreateContactResponse_3 extends _i1.Fake
    implements _i5.CreateContactResponse {}

/// A class which mocks [UserModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserModel extends _i1.Mock implements _i6.UserModel {
  MockUserModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get status =>
      (super.noSuchMethod(Invocation.getter(#status), returnValue: '')
          as String);
  @override
  set status(String? _status) =>
      super.noSuchMethod(Invocation.setter(#status, _status),
          returnValueForMissingStub: null);
  @override
  String get displayName =>
      (super.noSuchMethod(Invocation.getter(#displayName), returnValue: '')
          as String);
  @override
  set displayName(String? _displayName) =>
      super.noSuchMethod(Invocation.setter(#displayName, _displayName),
          returnValueForMissingStub: null);
  @override
  _i7.Uint8List get profileImage =>
      (super.noSuchMethod(Invocation.getter(#profileImage),
          returnValue: _i7.Uint8List(0)) as _i7.Uint8List);
  @override
  set profileImage(_i7.Uint8List? _profileImage) =>
      super.noSuchMethod(Invocation.setter(#profileImage, _profileImage),
          returnValueForMissingStub: null);
  @override
  void setDisplayName(String? displayName) =>
      super.noSuchMethod(Invocation.method(#setDisplayName, [displayName]),
          returnValueForMissingStub: null);
  @override
  void setProfileImage(_i7.Uint8List? profileImage) =>
      super.noSuchMethod(Invocation.method(#setProfileImage, [profileImage]),
          returnValueForMissingStub: null);
  @override
  void setStatus(String? status) =>
      super.noSuchMethod(Invocation.method(#setStatus, [status]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ContactsModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockContactsModel extends _i1.Mock implements _i8.ContactsModel {
  MockContactsModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ObservableList<_i9.Contact> get contacts =>
      (super.noSuchMethod(Invocation.getter(#contacts),
              returnValue: _FakeObservableList_0<_i9.Contact>())
          as _i2.ObservableList<_i9.Contact>);
  @override
  set contacts(_i2.ObservableList<_i9.Contact>? _contacts) =>
      super.noSuchMethod(Invocation.setter(#contacts, _contacts),
          returnValueForMissingStub: null);
  @override
  String get filter =>
      (super.noSuchMethod(Invocation.getter(#filter), returnValue: '')
          as String);
  @override
  set filter(String? _filter) =>
      super.noSuchMethod(Invocation.setter(#filter, _filter),
          returnValueForMissingStub: null);
  @override
  _i2.ObservableList<_i9.Contact> get chatContacts =>
      (super.noSuchMethod(Invocation.getter(#chatContacts),
              returnValue: _FakeObservableList_0<_i9.Contact>())
          as _i2.ObservableList<_i9.Contact>);
  @override
  _i2.ObservableList<_i9.Contact> get savedContacts =>
      (super.noSuchMethod(Invocation.getter(#savedContacts),
              returnValue: _FakeObservableList_0<_i9.Contact>())
          as _i2.ObservableList<_i9.Contact>);
  @override
  _i2.ObservableList<_i9.Contact> get filteredChatContacts =>
      (super.noSuchMethod(Invocation.getter(#filteredChatContacts),
              returnValue: _FakeObservableList_0<_i9.Contact>())
          as _i2.ObservableList<_i9.Contact>);
  @override
  _i2.ObservableList<_i9.Contact> get filteredSavedContacts =>
      (super.noSuchMethod(Invocation.getter(#filteredSavedContacts),
              returnValue: _FakeObservableList_0<_i9.Contact>())
          as _i2.ObservableList<_i9.Contact>);
  @override
  _i10.Future<void> addContact(String? phoneNumber, String? displayName,
          bool? hasChat, bool? save) =>
      (super.noSuchMethod(
              Invocation.method(
                  #addContact, [phoneNumber, displayName, hasChat, save]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  void startChatWithContact(String? phoneNumber) => super.noSuchMethod(
      Invocation.method(#startChatWithContact, [phoneNumber]),
      returnValueForMissingStub: null);
  @override
  void setContactProfileImage(String? phoneNumber, String? base64Image) =>
      super.noSuchMethod(
          Invocation.method(
              #setContactProfileImage, [phoneNumber, base64Image]),
          returnValueForMissingStub: null);
  @override
  void setContactStatus(String? phoneNumber, String? status) => super
      .noSuchMethod(Invocation.method(#setContactStatus, [phoneNumber, status]),
          returnValueForMissingStub: null);
  @override
  void setContactDisplayName(String? phoneNumber, String? displayName) =>
      super.noSuchMethod(
          Invocation.method(#setContactDisplayName, [phoneNumber, displayName]),
          returnValueForMissingStub: null);
  @override
  void deleteChatsWithContacts(List<String>? phoneNumbers) => super
      .noSuchMethod(Invocation.method(#deleteChatsWithContacts, [phoneNumbers]),
          returnValueForMissingStub: null);
  @override
  void deleteContacts(List<String>? phoneNumbers) =>
      super.noSuchMethod(Invocation.method(#deleteContacts, [phoneNumbers]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> initialise() => (super.noSuchMethod(
      Invocation.method(#initialise, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppService extends _i1.Mock implements _i11.AppService {
  MockAppService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ChatModel get chatModel =>
      (super.noSuchMethod(Invocation.getter(#chatModel),
          returnValue: _FakeChatModel_1()) as _i3.ChatModel);
  @override
  _i10.Future<void> goOnline() => (super.noSuchMethod(
      Invocation.method(#goOnline, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  void disconnect() => super.noSuchMethod(Invocation.method(#disconnect, []),
      returnValueForMissingStub: null);
  @override
  _i10.Future<_i4.Message> sendMessage(
          String? recipientNumber, String? text, String? symmetricKey) =>
      (super.noSuchMethod(
              Invocation.method(
                  #sendMessage, [recipientNumber, text, symmetricKey]),
              returnValue: Future<_i4.Message>.value(_FakeMessage_2()))
          as _i10.Future<_i4.Message>);
  @override
  void requestDeleteMessages(
          String? recipientNumber, List<String>? ids, String? symmetricKey) =>
      super.noSuchMethod(
          Invocation.method(
              #requestDeleteMessages, [recipientNumber, ids, symmetricKey]),
          returnValueForMissingStub: null);
  @override
  void sendStatus(
          String? recipientNumber, String? status, String? symmetricKey) =>
      super.noSuchMethod(
          Invocation.method(
              #sendStatus, [recipientNumber, status, symmetricKey]),
          returnValueForMissingStub: null);
  @override
  void sendProfileImage(
          String? recipientNumber, String? base64Image, String? symmetricKey) =>
      super.noSuchMethod(
          Invocation.method(
              #sendProfileImage, [recipientNumber, base64Image, symmetricKey]),
          returnValueForMissingStub: null);
  @override
  void sendDeliveredAcknowledgement(
          String? recipientNumber, String? messageId, String? symmetricKey) =>
      super.noSuchMethod(
          Invocation.method(#sendDeliveredAcknowledgement,
              [recipientNumber, messageId, symmetricKey]),
          returnValueForMissingStub: null);
  @override
  void sendSeenAcknowledgementForContact(
          String? recipientNumber, String? symmetricKey) =>
      super.noSuchMethod(
          Invocation.method(#sendSeenAcknowledgementForContact,
              [recipientNumber, symmetricKey]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i12.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<String?> fetchContactNameByPhoneNumber(String? phoneNumber) =>
      (super.noSuchMethod(
          Invocation.method(#fetchContactNameByPhoneNumber, [phoneNumber]),
          returnValue: Future<String?>.value()) as _i10.Future<String?>);
  @override
  _i10.Future<List<_i9.Contact>> fetchContacts() =>
      (super.noSuchMethod(Invocation.method(#fetchContacts, []),
              returnValue: Future<List<_i9.Contact>>.value(<_i9.Contact>[]))
          as _i10.Future<List<_i9.Contact>>);
  @override
  _i10.Future<List<_i9.Contact>> fetchSavedContacts() =>
      (super.noSuchMethod(Invocation.method(#fetchSavedContacts, []),
              returnValue: Future<List<_i9.Contact>>.value(<_i9.Contact>[]))
          as _i10.Future<List<_i9.Contact>>);
  @override
  _i10.Future<_i9.Contact?> fetchContactByNumber(String? number) =>
      (super.noSuchMethod(Invocation.method(#fetchContactByNumber, [number]),
              returnValue: Future<_i9.Contact?>.value())
          as _i10.Future<_i9.Contact?>);
  @override
  _i10.Future<List<_i9.Contact>> fetchContactsWithChats() =>
      (super.noSuchMethod(Invocation.method(#fetchContactsWithChats, []),
              returnValue: Future<List<_i9.Contact>>.value(<_i9.Contact>[]))
          as _i10.Future<List<_i9.Contact>>);
  @override
  _i10.Future<List<_i4.Message>> fetchUnseenMessagesWith(
          String? senderPhoneNumber) =>
      (super.noSuchMethod(
              Invocation.method(#fetchUnseenMessagesWith, [senderPhoneNumber]),
              returnValue: Future<List<_i4.Message>>.value(<_i4.Message>[]))
          as _i10.Future<List<_i4.Message>>);
  @override
  _i10.Future<_i5.CreateContactResponse> createContact(
          String? phoneNumber,
          String? displayName,
          String? status,
          String? profileImage,
          bool? hasChat,
          bool? save) =>
      (super.noSuchMethod(
              Invocation.method(#createContact, [
                phoneNumber,
                displayName,
                status,
                profileImage,
                hasChat,
                save
              ]),
              returnValue: Future<_i5.CreateContactResponse>.value(
                  _FakeCreateContactResponse_3()))
          as _i10.Future<_i5.CreateContactResponse>);
  @override
  _i10.Future<void> setContactSymmetricKey(String? contactPhone, String? key) =>
      (super.noSuchMethod(
              Invocation.method(#setContactSymmetricKey, [contactPhone, key]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> startChatWithContact(String? phoneNumber) => (super
          .noSuchMethod(Invocation.method(#startChatWithContact, [phoneNumber]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
      as _i10.Future<void>);
  @override
  _i10.Future<void> setContactHasChat(String? phoneNumber, bool? hasChat) =>
      (super.noSuchMethod(
              Invocation.method(#setContactHasChat, [phoneNumber, hasChat]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> updateContactProfileImage(
          String? phoneNumber, String? base64Image) =>
      (super.noSuchMethod(
              Invocation.method(
                  #updateContactProfileImage, [phoneNumber, base64Image]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> updateContactStatus(String? phoneNumber, String? status) =>
      (super.noSuchMethod(
              Invocation.method(#updateContactStatus, [phoneNumber, status]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> updateContactDisplayName(
          String? phoneNumber, String? displayName) =>
      (super.noSuchMethod(
              Invocation.method(
                  #updateContactDisplayName, [phoneNumber, displayName]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<bool> messageWithIdExists(String? id) =>
      (super.noSuchMethod(Invocation.method(#messageWithIdExists, [id]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<List<_i4.Message>> fetchMessagesWith(
          String? phoneNumber, int? page) =>
      (super.noSuchMethod(
              Invocation.method(#fetchMessagesWith, [phoneNumber, page]),
              returnValue: Future<List<_i4.Message>>.value(<_i4.Message>[]))
          as _i10.Future<List<_i4.Message>>);
  @override
  _i10.Future<void> deleteContact(String? phoneNumber) => (super.noSuchMethod(
      Invocation.method(#deleteContact, [phoneNumber]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> deleteMessagesWithContact(String? phoneNumber) =>
      (super.noSuchMethod(
              Invocation.method(#deleteMessagesWithContact, [phoneNumber]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> deleteMessages(List<String>? ids) => (super.noSuchMethod(
      Invocation.method(#deleteMessages, [ids]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> markMessagesDeleted(List<String>? ids) =>
      (super.noSuchMethod(Invocation.method(#markMessagesDeleted, [ids]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<_i4.Message?> mostRecentMessageWithContact(
          String? contactPhoneNumber) =>
      (super.noSuchMethod(
              Invocation.method(
                  #mostRecentMessageWithContact, [contactPhoneNumber]),
              returnValue: Future<_i4.Message?>.value())
          as _i10.Future<_i4.Message?>);
  @override
  _i4.Message saveMessage(String? senderPhoneNumber,
          String? recipientPhoneNumber, String? contents,
          {String? id, int? timestamp}) =>
      (super.noSuchMethod(
          Invocation.method(
              #saveMessage,
              [senderPhoneNumber, recipientPhoneNumber, contents],
              {#id: id, #timestamp: timestamp}),
          returnValue: _FakeMessage_2()) as _i4.Message);
  @override
  void markMessageDelivered(String? id) =>
      super.noSuchMethod(Invocation.method(#markMessageDelivered, [id]),
          returnValueForMissingStub: null);
  @override
  void markMessagesSeen(List<String>? ids) =>
      super.noSuchMethod(Invocation.method(#markMessagesSeen, [ids]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
